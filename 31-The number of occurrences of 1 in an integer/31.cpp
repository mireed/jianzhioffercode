//《剑指offer》31.整数中1出现的次数（从1到n整数中1出现的次数）
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
题目：输入一个整数n，求从1到n这n个整数的十进制表示中1出现的次数。
     例如输入12，从1到12这些整数中包含1的数字有1，10，11和12，1一共出现了5次。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
思路：两种方法，一种是从1到n遍历，每次通过对10求余数判断整数的个位数字是不是1，大于10的除以10之后再判断。
     我们对每个数字都要做除法和求余运算以求出该数字中1出现的次数。如果输入数字n，n有O(logn)位，我们需要
	 判断每一位是不是1，那么时间复杂度为O(n*logn)。这样做，计算量大，效率不高。
     本文采用数学之美上面提出的方法，设定整数点（如1、10、100等等）作为位置点i（对应n的各位、十位、百位等等），
	 分别对每个数位上有多少包含1的点进行分析。根据设定的整数位置，对n进行分割，分为两部分，高位n/i，低位n%i当i表示百位，
	 且百位对应的数>=2,如n=31456,i=100，则a=314,b=56，此时百位为1的次数有a/10+1=32（最高两位0~31），每一次都包含100个连续的点，
	 即共有(a/10+1)*100个点的百位为1当i表示百位，且百位对应的数为1，如n=31156,i=100，则a=311,b=56，此时百位对应的就是1，则共有a/10
	 (最高两位0-30)次是包含100个连续点，当最高两位为31（即a=311），本次只对应局部点00~56，共b+1次，所有点加起来共有（a/10*100）+(b+1)，
	 这些点百位对应为1当i表示百位，且百位对应的数为0,如n=31056,i=100，则a=310,b=56，此时百位为1的次数有a/10=31（最高两位0~30）
     综合以上三种情况，当百位对应0或>=2时，有(a+8)/10次包含所有100个点，还有当百位为1(a%10==1)，需要增加局部点b+1之所以补8，
	 是因为当百位为0，则a/10==(a+8)/10，当百位>=2，补8会产生进位位，效果等同于(a/10+1)
*/
#include <iostream>

using namespace std;

int NumberOf1Between1AndN_Solution(int n)
{
	int count = 0;
	for (int i = 1; i <= n; i *= 10) {
		int a = n / i, b = n % i;
		if (a % 10 == 0) {
			count += (a / 10)*i;
		}
		if (a % 10 == 1) {
			count += (a / 10) * i + (a % 10 == 1) * (b + 1);
		}
		if (a % 10 >= 2) {
			count += (a / 10 + 1) * i;
		}
	}
	return count;
}